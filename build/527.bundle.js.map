{"version":3,"sources":["webpack://app-continents-api/./node_modules/graphql/jsutils/isObjectLike.mjs","webpack://app-continents-api/./node_modules/graphql/polyfills/symbols.mjs","webpack://app-continents-api/./node_modules/graphql/language/location.mjs","webpack://app-continents-api/./node_modules/graphql/language/printLocation.mjs","webpack://app-continents-api/./node_modules/graphql/error/GraphQLError.mjs","webpack://app-continents-api/./node_modules/graphql/error/syntaxError.mjs","webpack://app-continents-api/./node_modules/graphql/language/kinds.mjs","webpack://app-continents-api/./node_modules/graphql/language/tokenKind.mjs","webpack://app-continents-api/./node_modules/graphql/jsutils/devAssert.mjs","webpack://app-continents-api/./node_modules/graphql/language/source.mjs","webpack://app-continents-api/./node_modules/graphql/language/directiveLocation.mjs","webpack://app-continents-api/./node_modules/graphql/language/lexer.mjs","webpack://app-continents-api/./node_modules/graphql/language/parser.mjs","webpack://app-continents-api/./node_modules/graphql-tag/lib/index.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","asyncIterator","SYMBOL_TO_STRING_TAG","toStringTag","getLocation","source","position","match","lineRegexp","line","column","exec","body","index","length","printLocation","location","printSourceLocation","start","sourceLocation","firstLineColumnOffset","locationOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","concat","name","lines","split","locationLine","subLineIndex","Math","floor","subLineColumnNum","subLines","i","push","slice","printPrefixedLines","map","subLine","existingLines","filter","_ref","undefined","padLen","max","apply","_ref2","_ref3","str","prefix","join","len","Array","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","_wrapNativeSuper","Class","_cache","Map","fn","Function","toString","indexOf","TypeError","has","get","set","Wrapper","_construct","arguments","_getPrototypeOf","this","create","value","_setPrototypeOf","Parent","args","_isNativeReflectConstruct","Reflect","construct","a","instance","bind","sham","Proxy","Date","e","o","p","setPrototypeOf","__proto__","getPrototypeOf","GraphQLError","_Error","subClass","superClass","_inherits","Derived","hasNativeReflectConstruct","Constructor","protoProps","_super","result","Super","NewTarget","message","nodes","positions","path","originalError","extensions","_locations2","_source2","_positions2","_extensions2","_this","_classCallCheck","_nodes$0$loc","_nodes","isArray","_source","loc","_locations","_positions","reduce","list","node","pos","_extensions","originalExtensions","defineProperties","locations","stack","Error","captureStackTrace","error","output","_i2","_error$nodes2","_i4","_error$locations2","printError","syntaxError","description","Kind","freeze","NAME","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","SOF","EOF","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","BLOCK_STRING","COMMENT","devAssert","condition","Boolean","Source","inspect","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","Lexer","startOfFileToken","lastToken","token","lineStart","_proto","advance","lookahead","kind","_token$next","next","readToken","printCharCode","code","isNaN","JSON","stringify","String","fromCharCode","toUpperCase","lexer","prev","bodyLength","end","charCodeAt","_line","_col","readComment","readBlockString","readString","readNumber","readName","unexpectedCharacterMessage","col","firstCode","isFloat","readDigits","isNameStart","b","c","d","chunkStart","charCode","char2hex","invalidSequence","rawValue","Parser","options","sourceObj","isSource","_lexer","_options","parseName","expectToken","parseDocument","definitions","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","peekDescription","unexpected","operation","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","type","parseTypeReference","defaultValue","expectOptionalToken","parseValueLiteral","selections","parseSelection","parseFragment","parseField","alias","nameOrAlias","parseArguments","isConst","item","parseConstArgument","parseArgument","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","_this$_options","expectKeyword","experimentalFragmentVariables","parseList","parseObject","parseStringLiteral","block","values","any","_this2","fields","parseObjectField","parseDirective","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","interfaces","parseImplementsInterfaces","parseFieldsDefinition","_this$_options2","allowLegacySDLImplementsInterfaces","types","delimitedMany","_this$_options3","allowLegacySDLEmptyFields","parseFieldDefinition","parseArgumentDefs","parseInputValueDef","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","parseDirectiveLocations","parseDirectiveLocation","startToken","_this$_options4","noLocation","getTokenKindDesc","getTokenDesc","atToken","openKind","parseFn","closeKind","delimiterKind","isPunctuatorTokenKind","docCache","fragmentSourceMap","printFragmentWarnings","normalize","string","replace","trim","cacheKey","parsed","parse","doc","workSet","Set","forEach","keys","add","endToken","stripLoc","ast","seenKeys","fragmentDefinition","fragmentName","sourceKey","substring","sourceKeySet","console","warn","processFragments","gql","literals","_i","arg","gql_1","extras","resetCaches","clear","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables"],"mappings":"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","file":"527.bundle.js","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport default function isObjectLike(value) {\n  return _typeof(value) == 'object' && value !== null;\n}\n","// In ES2015 (or a polyfilled) environment, this will be Symbol.iterator\n// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\nexport var SYMBOL_ITERATOR = typeof Symbol === 'function' && Symbol.iterator != null ? Symbol.iterator : '@@iterator'; // In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator\n// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\nexport var SYMBOL_ASYNC_ITERATOR = typeof Symbol === 'function' && Symbol.asyncIterator != null ? Symbol.asyncIterator : '@@asyncIterator'; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\nexport var SYMBOL_TO_STRING_TAG = typeof Symbol === 'function' && Symbol.toStringTag != null ? Symbol.toStringTag : '@@toStringTag';\n","/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}\n","import { getLocation } from \"./location.mjs\";\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(location.source, getLocation(location.source, location.start));\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = sourceLocation.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = sourceLocation.line + lineOffset;\n  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = sourceLocation.column + columnOffset;\n  var locationStr = \"\".concat(source.name, \":\").concat(lineNum, \":\").concat(columnNum, \"\\n\");\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  var locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    var subLineIndex = Math.floor(columnNum / 80);\n    var subLineColumnNum = columnNum % 80;\n    var subLines = [];\n\n    for (var i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return locationStr + printPrefixedLines([[\"\".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function (subLine) {\n      return ['', subLine];\n    }), [[' ', whitespace(subLineColumnNum - 1) + '^'], ['', subLines[subLineIndex + 1]]]));\n  }\n\n  return locationStr + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1), lines[lineIndex - 1]], [\"\".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {\n    var prefix = _ref2[0];\n    return prefix.length;\n  }));\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return leftPad(padLen, prefix) + (line ? ' | ' + line : ' |');\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction leftPad(len, str) {\n  return whitespace(len - str.length) + str;\n}\n","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// FIXME:\n// flowlint uninitialized-instance-property:off\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport { getLocation } from \"../language/location.mjs\";\nimport { printLocation, printSourceLocation } from \"../language/printLocation.mjs\";\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport var GraphQLError = /*#__PURE__*/function (_Error) {\n  _inherits(GraphQLError, _Error);\n\n  var _super = _createSuper(GraphQLError);\n\n  /**\n   * A message describing the Error for debugging purposes.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   *\n   * Note: should be treated as readonly, despite invariant usage.\n   */\n\n  /**\n   * An array of { line, column } locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n  function GraphQLError(message, nodes, source, positions, path, originalError, extensions) {\n    var _locations2, _source2, _positions2, _extensions2;\n\n    var _this;\n\n    _classCallCheck(this, GraphQLError);\n\n    _this = _super.call(this, message); // Compute list of blame nodes.\n\n    var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n    var _source = source;\n\n    if (!_source && _nodes) {\n      var _nodes$0$loc;\n\n      _source = (_nodes$0$loc = _nodes[0].loc) === null || _nodes$0$loc === void 0 ? void 0 : _nodes$0$loc.source;\n    }\n\n    var _positions = positions;\n\n    if (!_positions && _nodes) {\n      _positions = _nodes.reduce(function (list, node) {\n        if (node.loc) {\n          list.push(node.loc.start);\n        }\n\n        return list;\n      }, []);\n    }\n\n    if (_positions && _positions.length === 0) {\n      _positions = undefined;\n    }\n\n    var _locations;\n\n    if (positions && source) {\n      _locations = positions.map(function (pos) {\n        return getLocation(source, pos);\n      });\n    } else if (_nodes) {\n      _locations = _nodes.reduce(function (list, node) {\n        if (node.loc) {\n          list.push(getLocation(node.loc.source, node.loc.start));\n        }\n\n        return list;\n      }, []);\n    }\n\n    var _extensions = extensions;\n\n    if (_extensions == null && originalError != null) {\n      var originalExtensions = originalError.extensions;\n\n      if (isObjectLike(originalExtensions)) {\n        _extensions = originalExtensions;\n      }\n    }\n\n    Object.defineProperties(_assertThisInitialized(_this), {\n      name: {\n        value: 'GraphQLError'\n      },\n      message: {\n        value: message,\n        // By being enumerable, JSON.stringify will include `message` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: true,\n        writable: true\n      },\n      locations: {\n        // Coercing falsy values to undefined ensures they will not be included\n        // in JSON.stringify() when not provided.\n        value: (_locations2 = _locations) !== null && _locations2 !== void 0 ? _locations2 : undefined,\n        // By being enumerable, JSON.stringify will include `locations` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: _locations != null\n      },\n      path: {\n        // Coercing falsy values to undefined ensures they will not be included\n        // in JSON.stringify() when not provided.\n        value: path !== null && path !== void 0 ? path : undefined,\n        // By being enumerable, JSON.stringify will include `path` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: path != null\n      },\n      nodes: {\n        value: _nodes !== null && _nodes !== void 0 ? _nodes : undefined\n      },\n      source: {\n        value: (_source2 = _source) !== null && _source2 !== void 0 ? _source2 : undefined\n      },\n      positions: {\n        value: (_positions2 = _positions) !== null && _positions2 !== void 0 ? _positions2 : undefined\n      },\n      originalError: {\n        value: originalError\n      },\n      extensions: {\n        // Coercing falsy values to undefined ensures they will not be included\n        // in JSON.stringify() when not provided.\n        value: (_extensions2 = _extensions) !== null && _extensions2 !== void 0 ? _extensions2 : undefined,\n        // By being enumerable, JSON.stringify will include `path` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: _extensions != null\n      }\n    }); // Include (non-enumerable) stack trace.\n\n    if (originalError !== null && originalError !== void 0 && originalError.stack) {\n      Object.defineProperty(_assertThisInitialized(_this), 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true\n      });\n      return _possibleConstructorReturn(_this);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError);\n    } else {\n      Object.defineProperty(_assertThisInitialized(_this), 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(GraphQLError, [{\n    key: \"toString\",\n    value: function toString() {\n      return printError(this);\n    } // FIXME: workaround to not break chai comparisons, should be remove in v16\n    // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n  }, {\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'Object';\n    }\n  }]);\n\n  return GraphQLError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  var output = error.message;\n\n  if (error.nodes) {\n    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {\n      var node = _error$nodes2[_i2];\n\n      if (node.loc) {\n        output += '\\n\\n' + printLocation(node.loc);\n      }\n    }\n  } else if (error.source && error.locations) {\n    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {\n      var location = _error$locations2[_i4];\n      output += '\\n\\n' + printSourceLocation(error.source, location);\n    }\n  }\n\n  return output;\n}\n","import { GraphQLError } from \"./GraphQLError.mjs\";\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}\n","/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n","export default function devAssert(condition, message) {\n  var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport var Source = /*#__PURE__*/function () {\n  function Source(body) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GraphQL request';\n    var locationOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      line: 1,\n      column: 1\n    };\n    typeof body === 'string' || devAssert(0, \"Body must be a string. Received: \".concat(inspect(body), \".\"));\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive.');\n    this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive.');\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  _createClass(Source, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'Source';\n    }\n  }]);\n\n  return Source;\n}();\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n","/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */\n","import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Token } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { dedentBlockStringValue } from \"./blockString.mjs\";\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport var Lexer = /*#__PURE__*/function () {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  function Lexer(source) {\n    var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n\n  var _proto = Lexer.prototype;\n\n  _proto.advance = function advance() {\n    this.lastToken = this.token;\n    var token = this.token = this.lookahead();\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n  ;\n\n  _proto.lookahead = function lookahead() {\n    var token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        var _token$next;\n\n        // Note: next is only mutable during parsing, so we cast to allow this.\n        token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  };\n\n  return Lexer;\n}();\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = prev.end;\n\n  while (pos < bodyLength) {\n    var code = body.charCodeAt(pos);\n    var _line = lexer.line;\n\n    var _col = 1 + pos - lexer.lineStart; // SourceCharacter\n\n\n    switch (code) {\n      case 0xfeff: // <BOM>\n\n      case 9: //   \\t\n\n      case 32: //  <space>\n\n      case 44:\n        //  ,\n        ++pos;\n        continue;\n\n      case 10:\n        //  \\n\n        ++pos;\n        ++lexer.line;\n        lexer.lineStart = pos;\n        continue;\n\n      case 13:\n        //  \\r\n        if (body.charCodeAt(pos + 1) === 10) {\n          pos += 2;\n        } else {\n          ++pos;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = pos;\n        continue;\n\n      case 33:\n        //  !\n        return new Token(TokenKind.BANG, pos, pos + 1, _line, _col, prev);\n\n      case 35:\n        //  #\n        return readComment(source, pos, _line, _col, prev);\n\n      case 36:\n        //  $\n        return new Token(TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);\n\n      case 38:\n        //  &\n        return new Token(TokenKind.AMP, pos, pos + 1, _line, _col, prev);\n\n      case 40:\n        //  (\n        return new Token(TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);\n\n      case 41:\n        //  )\n        return new Token(TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);\n\n      case 46:\n        //  .\n        if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n          return new Token(TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);\n        }\n\n        break;\n\n      case 58:\n        //  :\n        return new Token(TokenKind.COLON, pos, pos + 1, _line, _col, prev);\n\n      case 61:\n        //  =\n        return new Token(TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);\n\n      case 64:\n        //  @\n        return new Token(TokenKind.AT, pos, pos + 1, _line, _col, prev);\n\n      case 91:\n        //  [\n        return new Token(TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);\n\n      case 93:\n        //  ]\n        return new Token(TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);\n\n      case 123:\n        // {\n        return new Token(TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);\n\n      case 124:\n        // |\n        return new Token(TokenKind.PIPE, pos, pos + 1, _line, _col, prev);\n\n      case 125:\n        // }\n        return new Token(TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);\n\n      case 34:\n        //  \"\n        if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n          return readBlockString(source, pos, _line, _col, prev, lexer);\n        }\n\n        return readString(source, pos, _line, _col, prev);\n\n      case 45: //  -\n\n      case 48: //  0\n\n      case 49: //  1\n\n      case 50: //  2\n\n      case 51: //  3\n\n      case 52: //  4\n\n      case 53: //  5\n\n      case 54: //  6\n\n      case 55: //  7\n\n      case 56: //  8\n\n      case 57:\n        //  9\n        return readNumber(source, pos, code, _line, _col, prev);\n\n      case 65: //  A\n\n      case 66: //  B\n\n      case 67: //  C\n\n      case 68: //  D\n\n      case 69: //  E\n\n      case 70: //  F\n\n      case 71: //  G\n\n      case 72: //  H\n\n      case 73: //  I\n\n      case 74: //  J\n\n      case 75: //  K\n\n      case 76: //  L\n\n      case 77: //  M\n\n      case 78: //  N\n\n      case 79: //  O\n\n      case 80: //  P\n\n      case 81: //  Q\n\n      case 82: //  R\n\n      case 83: //  S\n\n      case 84: //  T\n\n      case 85: //  U\n\n      case 86: //  V\n\n      case 87: //  W\n\n      case 88: //  X\n\n      case 89: //  Y\n\n      case 90: //  Z\n\n      case 95: //  _\n\n      case 97: //  a\n\n      case 98: //  b\n\n      case 99: //  c\n\n      case 100: // d\n\n      case 101: // e\n\n      case 102: // f\n\n      case 103: // g\n\n      case 104: // h\n\n      case 105: // i\n\n      case 106: // j\n\n      case 107: // k\n\n      case 108: // l\n\n      case 109: // m\n\n      case 110: // n\n\n      case 111: // o\n\n      case 112: // p\n\n      case 113: // q\n\n      case 114: // r\n\n      case 115: // s\n\n      case 116: // t\n\n      case 117: // u\n\n      case 118: // v\n\n      case 119: // w\n\n      case 120: // x\n\n      case 121: // y\n\n      case 122:\n        // z\n        return readName(source, pos, _line, _col, prev);\n    }\n\n    throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n  }\n\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n  return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n\n  if (code === 46 || isNameStart(code)) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n} // _ A-Z a-z\n\n\nfunction isNameStart(code) {\n  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;\n}\n","import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Kind } from \"./kinds.mjs\";\nimport { Location } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { Source, isSource } from \"./source.mjs\";\nimport { DirectiveLocation } from \"./directiveLocation.mjs\";\nimport { Lexer, isPunctuatorTokenKind } from \"./lexer.mjs\";\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport var Parser = /*#__PURE__*/function () {\n  function Parser(source, options) {\n    var sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var _this$_options;\n\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return {\n              kind: Kind.BOOLEAN,\n              value: true,\n              loc: this.loc(token)\n            };\n\n          case 'false':\n            return {\n              kind: Kind.BOOLEAN,\n              value: false,\n              loc: this.loc(token)\n            };\n\n          case 'null':\n            return {\n              kind: Kind.NULL,\n              loc: this.loc(token)\n            };\n\n          default:\n            return {\n              kind: Kind.ENUM,\n              value: token.value,\n              loc: this.loc(token)\n            };\n        }\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      description: description,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var _this$_options2;\n\n    if (!this.expectOptionalKeyword('implements')) {\n      return [];\n    }\n\n    if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {\n      var types = []; // Optional leading ampersand\n\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || this.peek(TokenKind.NAME));\n\n      return types;\n    }\n\n    return this.delimitedMany(TokenKind.AMP, this.parseNamedType);\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    var _this$_options3;\n\n    // Legacy support for the SDL?\n    if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    var _this$_options4;\n\n    if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {\n      return new Location(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(getTokenKindDesc(kind), \", found \").concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token), \".\"));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n  ;\n\n  _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? \" \\\"\".concat(value, \"\\\"\") : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? \"\\\"\".concat(kind, \"\\\"\") : kind;\n}\n","import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}