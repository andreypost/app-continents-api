{"version":3,"sources":["webpack://app-continents-api/./src/components/List.tsx","webpack://app-continents-api/./src/components/TreeList.tsx","webpack://app-continents-api/./src/components/Countries.tsx","webpack://app-continents-api/./src/views/Main.tsx"],"names":["children","data","clase","useContext","ListContext","closeTreeList","setCloseTreeList","useState","listState","setListState","className","onClick","state","style","display","createContext","continent","Provider","value","name","countries","map","country","languages","language","Div","styled","GET_COUNTRIES","gql","useQuery","loading","error","Spiner","color","continents","length"],"mappings":"yOAmCA,QA1B8B,SAAC,GAAqC,IAAnCA,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAC/C,GAA4CC,gBAAWC,GAA/CC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,iBACvB,GAAkCC,cAAS,QAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KASA,OACE,eAAIC,UAAWR,EAAf,SACGF,GACC,2BACE,iBAAMW,QAAS,WAVjBN,EACFC,EAAiB,IAGnBG,GAAa,SAAAG,GAAK,MAAc,SAAVA,EAAmB,GAAK,WAMxC,SAAyCX,KACzC,eAAIY,MAAO,CAAEC,QAAST,GAAiBG,GAAvC,SAAqDR,QAGvD,yBACE,iBAAMW,QAAS,kBAAML,EAAiB,SAAtC,SAAgDL,SCrBnD,IAAMG,GAAcW,mBAAc,IAuBzC,QAjBoC,SAAC,GAA2B,IAAzBC,EAAyB,EAAzBA,UACnC,GAA0CT,cAAS,IAAnD,eAAOF,EAAP,KAAsBC,EAAtB,KACA,OACI,SAACF,EAAYa,SAAb,CAAsBC,MAAO,CAAEb,gBAAeC,oBAA9C,UACI,SAAC,EAAD,CAA2BL,KAAMe,EAAUG,KAAMjB,MAAO,OAAxD,SACKc,EAAUI,UAAUC,KAAI,SAAAC,GAAO,OAC5B,SAAC,EAAD,CAAyBrB,KAAMqB,EAAQH,KAAMjB,MAAO,YAApD,SACKoB,EAAQC,UAAUF,KAAI,SAACG,GAAD,OACnB,SAAC,EAAD,CAA0BvB,KAAMuB,EAASL,KAAMjB,MAAO,cAA3CsB,EAASL,UAFjBG,EAAQH,UAFhBH,EAAUG,S,QCZ3BM,EAAMC,SAAH,u3BAiEHC,GAAgBC,QAAH,kLA2BnB,QAd4B,WAC1B,OAAiCC,cAAyBF,GAAlD1B,EAAR,EAAQA,KAAM6B,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAEvB,OAAID,GAAgB,SAACE,EAAA,EAAD,IAChBD,GAAc,cAAGlB,MAAO,CAAEoB,MAAO,OAAnB,oFAGhB,SAACR,EAAD,UACGxB,GAAQA,EAAKiC,WAAWC,OAAS,GAAKlC,EAAKiC,WAAWb,KAAI,SAACL,GAAD,OACzD,SAAC,EAAD,CAA+BA,UAAWA,GAA3BA,EAAUG,YClFjC,EAPuB,WACrB,OACE,iBAAMT,UAAU,UAAhB,UACE,SAAC,EAAD","file":"209.bundle.js","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { ListContext } from './TreeList'\r\n\r\ninterface Props {\r\n  children?: JSX.Element[]\r\n  data: string\r\n  clase: string\r\n}\r\n\r\nconst List: React.FC<Props> = ({ children, data, clase }: Props) => {\r\n  const { closeTreeList, setCloseTreeList } = useContext(ListContext)\r\n  const [listState, setListState] = useState('none')\r\n\r\n  const handleListState = () => {\r\n    if (closeTreeList) {\r\n      setCloseTreeList('')\r\n      return\r\n    }\r\n    setListState(state => state === 'none' ? '' : 'none')\r\n  }\r\n  return (\r\n    <ul className={clase}>\r\n      {children ?\r\n        <li>\r\n          <span onClick={() => handleListState()}>{data}</span>\r\n          <ul style={{ display: closeTreeList || listState }}>{children}</ul>\r\n        </li>\r\n        :\r\n        <li>\r\n          <span onClick={() => setCloseTreeList('none')}>{data}</span>\r\n        </li>\r\n      }\r\n    </ul>\r\n  )\r\n}\r\nexport default List","import React, { createContext, useState } from 'react'\r\nimport List from './List'\r\n\r\ninterface LCProps {\r\n    closeTreeList: string\r\n    setCloseTreeList: (arg0: any) => void\r\n}\r\n\r\nexport const ListContext = createContext({} as LCProps)\r\n\r\ninterface TLProps {\r\n    continent: any\r\n}\r\n\r\nconst TreeList: React.FC<TLProps> = ({ continent }: TLProps) => {\r\n    const [closeTreeList, setCloseTreeList] = useState('')\r\n    return (\r\n        <ListContext.Provider value={{ closeTreeList, setCloseTreeList }}>\r\n            <List key={continent.name} data={continent.name} clase={'tree'}>\r\n                {continent.countries.map(country =>\r\n                    <List key={country.name} data={country.name} clase={'firstList'}>\r\n                        {country.languages.map((language: { name: string }) =>\r\n                            <List key={language.name} data={language.name} clase={'secondList'} />\r\n                        )}\r\n                    </List>\r\n                )}\r\n            </List>\r\n        </ListContext.Provider>\r\n    )\r\n}\r\n\r\nexport default TreeList","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useQuery, gql } from '@apollo/client'\r\nimport Spiner from 'Spiner'\r\nimport TreeList from './TreeList'\r\n\r\nconst Div = styled.div`\r\n  ul {\r\n    position: relative;\r\n    \r\n    li {\r\n      margin: 10px auto;\r\n      \r\n      span {\r\n        display: flex;\r\n        align-items: flex-start;\r\n        font-weight: 500;\r\n        border: 1px solid black;\r\n        border-radius: 5px;\r\n        background-color: white;\r\n        padding: 2px 10px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .tree:before,\r\n  .firstList:before,\r\n  .secondList:before {\r\n    content: '';\r\n    height: 100%;\r\n    position: absolute;\r\n    left: 65px;\r\n    bottom: -10px;\r\n    border-left: 1px dashed black;\r\n    z-index: -9;\r\n  }\r\n\r\n  .firstList:before,\r\n  .secondList:before {\r\n    height: unset;\r\n    width: 50%;\r\n    left: -15px;\r\n    top: 12px;\r\n    border-left: none;\r\n    border-top: 1px dashed black;\r\n  }\r\n\r\n  .secondList:before {\r\n    left: -95px;\r\n  }\r\n\r\n  @media (min-width: 992px) {\r\n    li span {\r\n      cursor: pointer;\r\n    }\r\n}`\r\n\r\ninterface Continents {\r\n  name: string\r\n  countries: [\r\n    {\r\n      name: string\r\n      languages: [{ name: string }]\r\n    },\r\n  ]\r\n}\r\n\r\ninterface ContinentsData {\r\n  continents: Continents[]\r\n}\r\n\r\nconst GET_COUNTRIES = gql`\r\n  query continents {\r\n    continents {\r\n      name\r\n      countries {\r\n        name\r\n        languages {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nconst Countries: React.FC = () => {\r\n  const { data, loading, error } = useQuery<ContinentsData>(GET_COUNTRIES)\r\n\r\n  if (loading) return <Spiner />\r\n  if (error) return <p style={{ color: 'red' }}>Sorry, it is not possible to receive data now, maybe try again later.</p>\r\n\r\n  return (\r\n    <Div>\r\n      {data && data.continents.length > 0 && data.continents.map((continent: { name: string; countries: any[] }) =>\r\n        <TreeList key={continent.name} continent={continent} />\r\n      )}\r\n    </Div >\r\n  )\r\n}\r\nexport default Countries\r\n\r\n\r\n\r\n// first variant---\r\n\r\n/*< Div >\r\n{ data && data.continents.length > 0 && data.continents.map((continent: { name: string; countries: any[] }) =>\r\n  <ul key={continent.name} className=\"tree\">\r\n    <li><span onClick={e => useCollapseList.openTree(e, '.firstList')}>{continent.name}</span>\r\n\r\n      {continent.countries.map(country =>\r\n        <ul key={country.name} className={'firstList ' + listState}>\r\n          <li><span onClick={e => useCollapseList.openTree(e, '.secondList')}>{country.name}</span>\r\n\r\n            {country.languages.map((language: { name: string }) =>\r\n              <ul key={language.name} className={listState + ' secondList'}>\r\n                <li><span onClick={e => useCollapseList.closeTree(e, '.tree', '.firstList, .secondList', setListState)}>{language.name}</span></li>\r\n              </ul>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </li>\r\n  </ul>\r\n)}\r\n  </Div >*/","import React from 'react'\r\nimport './Main.styles.scss'\r\nimport Countries from 'components/Countries'\r\n\r\nconst Main: React.FC = () => {\r\n  return (\r\n    <main className=\"section\">\r\n      <Countries />\r\n    </main>\r\n  )\r\n}\r\nexport default Main\r\n"],"sourceRoot":""}