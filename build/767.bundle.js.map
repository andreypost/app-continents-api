{"version":3,"sources":["webpack://app-continents-api/./src/utils/countries.helpers.ts","webpack://app-continents-api/./src/components/Countries.tsx","webpack://app-continents-api/./src/views/Main.tsx"],"names":["useCollapseList","e","list","target","parentNode","querySelectorAll","classList","toggle","Div","styled","GET_COUNTRIES","gql","listContext","useContext","ListContext","useState","listState","setListState","useQuery","data","loading","error","Spiner","style","color","continents","length","map","continent","className","onClick","name","countries","country","languages","language","tree","nodes","closest","add"],"mappings":"ktCAAO,I,IAAMA,EAAkB,SAClBC,EAAkBC,GAAc,UACpBD,EAAEE,OAAOC,WAAWC,iBAAiBH,IADjB,IACrC,2BAA6D,QACtDI,UAAUC,OAAO,QAFa,gC,wCCMvCC,EAAMC,SAAH,wsBA8DHC,GAAgBC,QAAH,4JA6CnB,QAhC4B,WAC1B,IAAMC,GAAcC,gBAAWC,KAC/B,GAAkCC,cAASH,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KACA,GAAiCC,cAAyBR,GAAlDS,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAEvB,OAAID,GAAgB,SAACE,EAAA,EAAD,IAChBD,GAAc,cAAGE,MAAO,CAAEC,MAAO,OAAnB,oFAGhB,SAAChB,EAAD,UACGW,GAAQA,EAAKM,WAAWC,OAAS,GAAKP,EAAKM,WAAWE,KAAI,SAACC,GAAD,OACzD,eAAyBC,UAAU,OAAnC,UACE,2BAAI,iBAAMC,QAAS,SAAA7B,GAAC,OAAID,EAAyBC,EAAG,eAAhD,SAAgE2B,EAAUG,OAE3EH,EAAUI,UAAUL,KAAI,SAAAM,GAAO,OAC9B,eAAuBJ,UAAW,aAAeb,EAAjD,UACE,2BAAI,iBAAMc,QAAS,SAAA7B,GAAC,OAAID,EAAyBC,EAAG,gBAAhD,SAAiEgC,EAAQF,OAE1EE,EAAQC,UAAUP,KAAI,SAACQ,GAAD,OACrB,eAAwBN,UAAWb,EAAY,cAA/C,UACE,yBAAI,iBAAMc,QAAS,SAAA7B,GAAC,ODtGX,SAMjBA,EAAkBmC,EAAcC,EAAepB,GAAmB,UACvDhB,EAAEE,OAAOmC,QAAQF,GAAM/B,iBAAiBgC,IADe,IACxE,2BAAiE,QAC1D/B,UAAUiC,IAAI,QAFmD,8BAIxEtB,EAAa,QC4FyBjB,CAA0BC,EAAG,QAAS,0BAA2BgB,IAArF,SAAqGkB,EAASJ,UAD3GI,EAASJ,aAJfE,EAAQF,aAJdH,EAAUG,YClF3B,EAPuB,WACrB,OACE,iBAAMF,UAAU,UAAhB,UACE,SAAC,EAAD","file":"767.bundle.js","sourcesContent":["export const useCollapseList = {\r\n    openTree(e: {target: any}, list: string) {\r\n        for (const ul of e.target.parentNode.querySelectorAll(list)) {\r\n            ul.classList.toggle('none')\r\n        }\r\n    },\r\n    closeTree(e: {target: any}, tree: string, nodes: string, setListState: any) {\r\n        for (const ul of e.target.closest(tree).querySelectorAll(nodes)) {\r\n            ul.classList.add('none')\r\n        }\r\n        setListState('none')\r\n    }\r\n}","import React, { useContext, useState } from 'react'\r\nimport { useQuery, gql } from '@apollo/client'\r\nimport { useCollapseList } from 'utils/countries.helpers'\r\nimport styled from 'styled-components'\r\nimport Spiner from 'Spiner'\r\nimport { ListContext } from '..'\r\n\r\nconst Div = styled.div`\r\n\r\nul {\r\n  position: relative;\r\n}\r\n\r\nul:before {\r\n  content: '';\r\n  height: 100%;\r\n  position: absolute;\r\n  left: 65px;\r\n  bottom: -10px;\r\n  border-left: 1px dashed black;\r\n  z-index: -9;\r\n}\r\n\r\n.firstList:before, .secondList:before {\r\n  height: unset;\r\n  width: 50%;\r\n  left: 27px;\r\n  top: 12px;\r\n  border-left: none;\r\n  border-top: 1px dashed black;\r\n}\r\n\r\n.secondList:before {\r\n  left: -12px;\r\n}\r\n\r\nli {\r\n  margin: 10px auto;\r\n}\r\n\r\nli span {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  font-weight: 500;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  background-color: white;\r\n  padding: 2px 10px;\r\n}\r\n\r\n@media (min-width: 992px) {\r\n  li span {\r\n    cursor: pointer;\r\n  }\r\n}\r\n`\r\n\r\ninterface Continents {\r\n  name: string,\r\n  countries: [{\r\n    name: string,\r\n    languages: [{ name: string }]\r\n  }]\r\n}\r\n\r\ninterface ContinentsData {\r\n  continents: Continents[]\r\n}\r\n\r\nconst GET_COUNTRIES = gql`\r\nquery continents {\r\n  continents {\r\n    name,\r\n    countries {\r\n      name,\r\n      languages {\r\n        name\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nconst Countries: React.FC = () => {\r\n  const listContext = useContext(ListContext)\r\n  const [listState, setListState] = useState(listContext)\r\n  const { data, loading, error } = useQuery<ContinentsData>(GET_COUNTRIES)\r\n\r\n  if (loading) return <Spiner />\r\n  if (error) return <p style={{ color: 'red' }}>Sorry, it is not possible to receive data now, maybe try again later.</p>\r\n\r\n  return (\r\n    <Div>\r\n      {data && data.continents.length > 0 && data.continents.map((continent: { name: string; countries: any[] }) =>\r\n        <ul key={continent.name} className=\"tree\">\r\n          <li><span onClick={e => useCollapseList.openTree(e, '.firstList')}>{continent.name}</span>\r\n\r\n            {continent.countries.map(country =>\r\n              <ul key={country.name} className={'firstList ' + listState}>\r\n                <li><span onClick={e => useCollapseList.openTree(e, '.secondList')}>{country.name}</span>\r\n\r\n                  {country.languages.map((language: { name: string }) =>\r\n                    <ul key={language.name} className={listState + ' secondList'}>\r\n                      <li><span onClick={e => useCollapseList.closeTree(e, '.tree', '.firstList, .secondList', setListState)}>{language.name}</span></li>\r\n                    </ul>\r\n                  )}\r\n                </li>\r\n              </ul>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </Div>\r\n  )\r\n}\r\nexport default Countries\r\n","import React from 'react'\r\nimport './Main.styles.scss'\r\nimport Countries from 'components/Countries'\r\n\r\nconst Main: React.FC = () => {\r\n  return (\r\n    <main className=\"section\">\r\n      <Countries />\r\n    </main>\r\n  )\r\n}\r\nexport default Main\r\n"],"sourceRoot":""}